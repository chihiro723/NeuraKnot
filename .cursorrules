# BridgeSpeak - AI分身チャットアプリケーション

## プロジェクト概要
AIと人間の境界を消すハイブリッドメッセージングアプリケーション。Next.jsフロントエンド、Go API、Python AIサーバー、PostgreSQL、Redisで構成されるマイクロサービスアーキテクチャ。

## 全体共通ルール

### 基本原則
- **可読性第一**: コードは書くより読む時間の方が長い
- **保守性重視**: 将来の変更に耐えうる設計
- **テスト駆動**: テスト可能なコードを書く
- **ドキュメント**: コードとドキュメントは同期させる
- **セキュリティ**: セキュリティは後付けではなく設計時から考慮

### 命名規則
- **変数・関数**: camelCase（JavaScript/TypeScript）、snake_case（Python）、camelCase（Go）
- **定数**: UPPER_SNAKE_CASE
- **クラス・コンポーネント**: PascalCase
- **ファイル・ディレクトリ**: kebab-case（フロントエンド）、snake_case（バックエンド）
- **API エンドポイント**: kebab-case

### コメント・ドキュメント
- **関数**: 目的、引数、戻り値、例外を明記
- **複雑なロジック**: なぜそうするかの理由を記述
- **TODO**: 期限と担当者を明記（例：`TODO(2024-12-31, @username): 実装理由`）
- **FIXME**: バグの詳細と修正方針を記述

### エラーハンドリング
- **明示的**: エラーを隠さず適切に処理
- **ログ出力**: エラー発生時のコンテキストを記録
- **ユーザー向け**: 技術的詳細を隠した分かりやすいメッセージ
- **監視**: 本番環境でのエラー追跡を考慮

### テスト
- **単体テスト**: すべての関数・メソッドをテスト
- **統合テスト**: 主要なユースケースをテスト
- **E2Eテスト**: ユーザーシナリオをテスト
- **カバレッジ**: 80%以上のカバレッジを維持

## ディレクトリ別個別ルール

### frontend/ 配下でのルール

#### 技術スタック
- **フレームワーク**: Next.js 15+ (App Router)
- **言語**: TypeScript 5+
- **スタイリング**: Tailwind CSS
- **状態管理**: React Context API + Zustand
- **認証**: Supabase Auth

#### コンポーネント設計
- **Atomic Design**: atoms → molecules → organisms → templates → pages
- **責任分離**: 1コンポーネント1責任
- **再利用性**: 汎用的なコンポーネントは`components/ui/`に配置
- **Props型定義**: すべてのPropsにTypeScript型を定義

#### サーバーコンポーネントとクライアントコンポーネントの使い分け
- **サーバーコンポーネント**: データ取得や認証など、サーバーサイドでのみ必要な処理・表示はサーバーコンポーネント（`export default async function` など）で実装する
- **クライアントコンポーネント**: ユーザー操作（クリック、入力）、状態管理、useState/useEffectなどReactのクライアントフックを使う場合は`"use client"`を先頭に記述しクライアントコンポーネントとして実装する
- **分離の徹底**: サーバーコンポーネントからクライアントコンポーネントを呼び出すことは可能だが、逆は不可。UI/UX要件に応じて適切に使い分ける
- **共通部品**: 汎用UIコンポーネント（`components/ui/`）は、できる限りクライアント・サーバー両方で使えるよう副作用を持たせない設計を推奨
- **パフォーマンス考慮**: サーバーコンポーネントを活用し、初期描画のパフォーマンスやSEOを最適化する

#### パフォーマンス
- **動的インポート**: 大きなコンポーネントは遅延読み込み
- **メモ化**: React.memo, useMemo, useCallbackを適切に使用
- **画像最適化**: Next.js Imageコンポーネントを使用
- **バンドルサイズ**: 不要な依存関係を排除

#### アクセシビリティ
- **ARIA属性**: 適切なARIA属性を設定
- **キーボード操作**: すべての機能をキーボードで操作可能
- **スクリーンリーダー**: 音声読み上げに対応
- **色のコントラスト**: WCAG 2.1 AA準拠

### backend-go/ 配下でのルール

#### 技術スタック
- **言語**: Go 1.21+
- **フレームワーク**: Gin
- **データベース**: PostgreSQL
- **ログ**: logrus
- **認証**: JWT + Supabase

#### アーキテクチャ
- **DDD**: ドメイン駆動設計を採用
- **レイヤードアーキテクチャ**: domain → usecase → interface → infra
- **依存関係逆転**: 上位層が下位層に依存しない
- **インターフェース**: 抽象化を適切に使用

#### プロジェクト構造
```
/cmd          # メインアプリケーション
/internal
  /domain     # ドメイン層（エンティティ、値オブジェクト）
  /usecase    # アプリケーション層（ユースケース）
  /interface  # インターフェース層（ハンドラー）
  /infra      # インフラ層（リポジトリ実装）
/pkg          # 外部公開パッケージ
```

#### コーディング規約
- **エラーハンドリング**: 明示的なエラー処理
- **ログ**: structured logging（JSON形式）
- **テスト**: テーブル駆動テストを推奨
- **ドキュメント**: godocコメントを記述

#### セキュリティ
- **入力検証**: すべての入力を検証
- **SQLインジェクション**: プリペアドステートメントを使用
- **認証・認可**: JWTトークンの適切な検証
- **レート制限**: API呼び出し頻度を制限

### backend-python/ 配下でのルール

#### 技術スタック
- **フレームワーク**: FastAPI
- **言語**: Python 3.11+
- **AI/ML**: LangChain, OpenAI API
- **データベース**: Supabase (PostgreSQL)
- **認証**: Supabase Auth

#### アーキテクチャ
- **クリーンアーキテクチャ**: 依存関係を適切に管理
- **依存性注入**: FastAPIのDIシステムを活用
- **非同期処理**: async/awaitを適切に使用
- **エラーハンドリング**: FastAPIの例外処理を活用

#### プロジェクト構造
```
app/
  api/         # APIエンドポイント
  models/      # データモデル
  services/    # ビジネスロジック
  security/    # 認証・認可
  database/    # データベース接続
  utils/       # ユーティリティ
```

#### AI/ML関連
- **プロンプト管理**: プロンプトを外部ファイルで管理
- **ストリーミング**: リアルタイムレスポンスを実装
- **エラーハンドリング**: AI APIのエラーを適切に処理
- **ログ**: AI処理の詳細をログ出力

#### パフォーマンス
- **非同期処理**: I/O待機を非同期で処理
- **キャッシュ**: Redisを活用したキャッシュ戦略
- **接続プール**: データベース接続を効率的に管理
- **メモリ管理**: 大きなデータの適切な処理

### nginx/ 配下でのルール

#### 設定ファイル
- **セキュリティ**: 適切なヘッダー設定
- **パフォーマンス**: キャッシュ戦略の実装
- **ログ**: アクセスログとエラーログの設定
- **SSL**: HTTPS設定の適切な実装

#### プロキシ設定
- **ロードバランシング**: 複数インスタンスへの分散
- **ヘルスチェック**: バックエンドの健全性確認
- **タイムアウト**: 適切なタイムアウト設定
- **リトライ**: 失敗時の再試行設定

### docker/ 配下でのルール

#### Dockerfile
- **マルチステージビルド**: 本番イメージのサイズ最適化
- **セキュリティ**: 非rootユーザーでの実行
- **キャッシュ**: レイヤーキャッシュを活用
- **ヘルスチェック**: コンテナの健全性確認

#### Docker Compose
- **環境分離**: 開発・本番環境の分離
- **ネットワーク**: 適切なネットワーク設定
- **ボリューム**: データ永続化の設定
- **依存関係**: サービス起動順序の管理

### terraform/ 配下でのルール

#### インフラ設計
- **環境分離**: dev/staging/prod環境の分離
- **モジュール化**: 再利用可能なモジュール設計
- **状態管理**: 適切なstate管理
- **セキュリティ**: IAMロールとポリシーの適切な設定

#### AWS リソース
- **VPC**: 適切なネットワーク設計
- **セキュリティグループ**: 最小権限の原則
- **RDS**: データベースの高可用性設定
- **ElastiCache**: Redisクラスターの設定

## 禁止事項

### 全般
- **ハードコーディング**: 設定値のハードコーディング禁止
- **マジックナンバー**: 意味のない数値の直接記述禁止
- **グローバル変数**: グローバル状態の乱用禁止
- **深いネスト**: 3階層を超えるネスト禁止
- **長い関数**: 50行を超える関数の作成禁止

### セキュリティ
- **SQLインジェクション**: 文字列結合でのSQL構築禁止
- **XSS**: ユーザー入力の無検証出力禁止
- **CSRF**: CSRFトークンなしの状態変更禁止
- **認証バイパス**: 認証チェックの省略禁止
- **機密情報**: ログへの機密情報出力禁止

### パフォーマンス
- **N+1クエリ**: ループ内でのデータベースクエリ禁止
- **メモリリーク**: リソースの適切な解放なし禁止
- **同期的I/O**: 非同期可能な処理の同期実行禁止
- **不要な再レンダリング**: 適切なメモ化なしの再レンダリング禁止

### コード品質
- **重複コード**: DRY原則違反の重複禁止
- **巨大ファイル**: 1000行を超えるファイル作成禁止
- **複雑な条件**: 複雑な条件分岐の禁止
- **副作用**: 予期しない副作用の発生禁止
- **テストなし**: テストコードなしの機能実装禁止

### アーキテクチャ
- **層の混在**: 異なる層の責任の混在禁止
- **循環依存**: モジュール間の循環依存禁止
- **密結合**: コンポーネント間の密結合禁止
- **単一責任違反**: 1つのクラス・関数の複数責任禁止
