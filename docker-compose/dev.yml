services:
  # Frontend - Next.js App (開発用 - ホットリロード)
  frontend:
    build:
      context: ../frontend
      dockerfile: docker/Dockerfile.dev
    ports:
      - "3000:3000"
    env_file:
      - ../frontend/.env.local
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ../frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend-go
      - backend-python
    networks:
      - app-network
    restart: unless-stopped

  # Backend Go (開発用 - ホットリロード)
  backend-go:
    build:
      context: ../backend-go
      dockerfile: docker/Dockerfile.dev
    ports:
      - "8080:8080"
    env_file:
      - ../backend-go/.env.local
    environment:
      # Docker特有の設定を上書き
      - DB_HOST=postgres
      - DB_NAME=go_backend
      - AI_SERVICE_URL=http://backend-python:8001
      # S3/MinIO設定（Docker内部のホスト名）
      - S3_ENDPOINT=http://minio:9000
    volumes:
      - ../backend-go:/app
      - /app/tmp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # Backend Python (開発用 - ホットリロード)
  backend-python:
    build:
      context: ../backend-python
      dockerfile: docker/Dockerfile.dev
    ports:
      - "8001:8001"
    env_file:
      - ../backend-python/.env.local
    environment:
      # Docker特有の設定を上書き
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../backend-python/app:/app/app
      - ../backend-python/logs:/app/logs
    networks:
      - app-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=go_backend
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../backend-go/migrations:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d go_backend"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # pgAdmin - PostgreSQL GUI管理ツール
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # MinIO - S3互換オブジェクトストレージ（開発用）
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console UI
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    networks:
      - app-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # MinIO Client - バケット初期化用
  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - app-network
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb myminio/neuraknot-dev-media --ignore-existing;
      mc anonymous set download myminio/neuraknot-dev-media;
      exit 0;
      "

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
  minio_data:

networks:
  app-network:
    driver: bridge