services:
  # # Frontend - Next.js App
  # frontend:
  #   build:
  #     context: ../frontend
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NODE_ENV=production
  #     - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
  #     - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
  #   depends_on:
  #     - go-api
  #     - ai-server
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  # Go API Server (本番用)
  go-api:
    build:
      context: ../backend-go
      dockerfile: docker/Dockerfile.prod
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=${POSTGRES_PASSWORD:-password}
      - DB_NAME=go_backend
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # Python AI Server
  # ai-server:
  #   build:
  #     context: ../backend-python/ai_server
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - ENVIRONMENT=production
  #     - API_HOST=0.0.0.0
  #     - API_PORT=8000
  #     - SUPABASE_URL=${SUPABASE_URL}
  #     - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
  #     - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #     - ENCRYPTION_KEY=${ENCRYPTION_KEY}
  #     - JWT_SECRET_KEY=${JWT_SECRET_KEY}
  #     - REDIS_URL=redis://redis:6379
  #     - LOG_LEVEL=INFO
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - ../backend-python/ai_server/logs:/app/logs
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=go_backend
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../backend-go/docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - go-api
      - ai-server
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
