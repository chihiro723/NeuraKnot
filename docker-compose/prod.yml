services:
  # Frontend - Next.js App
  frontend:
    build:
      context: ../frontend
      dockerfile: docker/Dockerfile.prod
    ports:
      - "3000:3000"
    env_file:
      - ../frontend/.env.production.local  # 本番個人設定（優先）
      - ../frontend/.env.local              # 個人設定
      - ../frontend/.env                    # デフォルト設定
    environment:
      # 本番環境固有の設定
      - NODE_ENV=production
    depends_on:
      - backend-go
      - backend-python
    networks:
      - app-network
    restart: unless-stopped

  # Go API Server (本番用)
  backend-go:
    build:
      context: ../backend-go
      dockerfile: docker/Dockerfile.prod
    ports:
      - "8080:8080"
    env_file:
      - ../backend-go/.env.production.local  # 本番個人設定（優先）
      - ../backend-go/.env.local              # 個人設定
      - ../backend-go/.env                    # デフォルト設定
    environment:
      # 本番環境固有の設定とDocker特有の設定を上書き
      - GIN_MODE=release
      - DB_HOST=postgres
      - DB_NAME=go_backend
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # Python AI Server
  backend-python:
    build:
      context: ../backend-python/ai_server
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - ../backend-python/ai_server/.env.production.local  # 本番個人設定（優先）
      - ../backend-python/ai_server/.env.local              # 個人設定
      - ../backend-python/ai_server/.env                    # デフォルト設定
    environment:
      # 本番環境固有の設定とDocker特有の設定を上書き
      - ENVIRONMENT=production
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../backend-python/ai_server/logs:/app/logs
    networks:
      - app-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=go_backend
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../backend-go/migrations:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d go_backend"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend-go
      - backend-python
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge