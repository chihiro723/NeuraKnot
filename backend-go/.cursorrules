# プロジェクト固有のCursor AI指示

## 一般的な指示
- このプロジェクトはGo言語のバックエンドAPIです
- Go 1.21以上を使用してください
- 標準的なGoの命名規則とコーディングスタイルに従ってください
- DDD（ドメイン駆動設計）のアプローチを採用してください
- Dockerを使用したコンテナ化を前提としてください
- TerraformでAWSにデプロイすることを想定してください

## コーディング規則
- エラーハンドリングは必ず適切に行ってください
- ログは structured logging を使用してください
- テストコードも必ず記述してください
- ドキュメントコメントを適切に記述してください

## 依存関係
- Web フレームワークには Gin を使用してください
- データベースには PostgreSQL を想定してください
- ログライブラリには logrus または zap を使用してください

## セキュリティ
- 入力値の検証を必ず行ってください
- 認証・認可の実装を適切に行ってください
- SQLインジェクション対策を徹底してください

## DDD（ドメイン駆動設計）
- レイヤードアーキテクチャを採用してください
- ドメインロジックはドメイン層に集約してください
- リポジトリパターンを使用してデータアクセスを抽象化してください
- ドメインサービス、アプリケーションサービスを適切に分離してください
- 集約（Aggregate）の境界を明確にしてください
- 値オブジェクト（Value Object）を積極的に使用してください

## プロジェクト構造（DDD準拠）
```
/cmd          - メインアプリケーション
/internal
  /domain     - ドメイン層（エンティティ、値オブジェクト、ドメインサービス）
  /usecase    - アプリケーション層（ユースケース、アプリケーションサービス）
  /interface  - インターフェース層（ハンドラー、プレゼンター）
  /infra      - インフラ層（リポジトリ実装、外部サービス）
/pkg          - 外部に公開可能なパッケージ
/api          - API定義（OpenAPI/Swagger）
/docker       - Docker関連ファイル
/terraform    - Terraform設定ファイル
```

## Docker関連
- マルチステージビルドを使用してください
- セキュリティを考慮したDockerfileを作成してください
- 本番用とローカル開発用のDocker設定を分けてください
- Docker Composeでローカル開発環境を構築してください
- 適切なヘルスチェックを実装してください

## Terraform/AWS関連
- Terraformのベストプラクティスに従ってください
- 環境ごと（dev/staging/prod）の設定を分離してください
- AWS Well-Architected Frameworkの原則に従ってください
- セキュリティグループ、IAMロールを適切に設定してください
- Auto Scaling、Load Balancerを考慮した設計にしてください
- RDS、ElastiCache等のマネージドサービスを活用してください

## 学習支援指示
- コードを提供する際は、必ず以下を含めてください：
  1. **目的・意図**: なぜそのアプローチを選んだか
  2. **技術的根拠**: 実装の理由や背景知識
  3. **代替手段**: 他の選択肢とそれぞれのメリット・デメリット
  4. **ベストプラクティス**: 業界標準や推奨事項
  5. **注意点**: 陥りやすい落とし穴や考慮事項
  6. **参考リソース**: 関連ドキュメントや学習リソース

## その他
- RESTful APIの設計原則に従ってください
- 適切なHTTPステータスコードを返してください
- JSONレスポンスの形式を統一してください
- OpenAPI/SwaggerでAPI仕様を文書化してください
- CI/CDパイプラインを考慮した設計にしてください
