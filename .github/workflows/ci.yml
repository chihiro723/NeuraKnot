name: CI

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  # 変更検出
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend-go: ${{ steps.filter.outputs.backend-go }}
      backend-python: ${{ steps.filter.outputs.backend-python }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend-go:
              - 'backend-go/**'
            backend-python:
              - 'backend-python/**'

  # Frontend CI
  frontend-ci:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Type check
        run: npx tsc --noEmit
      
      - name: Build check
        run: npm run build

  # Backend Go CI
  backend-go-ci:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-go == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend-go
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: backend-go/go.sum
      
      - name: Download dependencies
        run: go mod download
      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: backend-go
          args: --timeout=5m
      
      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...
      
      - name: Build check
        run: go build -v ./cmd/api

  # Backend Python CI
  backend-python-ci:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-python == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend-python
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend-python/requirements.txt
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black
          pip install -r requirements.txt
      
      - name: Run ruff
        run: ruff check .
      
      - name: Run black (check only)
        run: black --check .
      
      - name: Type check with mypy (if available)
        run: |
          pip install mypy || echo "mypy not available, skipping"
          mypy app/ --ignore-missing-imports || echo "Type check skipped"
        continue-on-error: true


