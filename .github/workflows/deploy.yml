name: Deploy to Production

on:
  push:
    branches: [main]
    paths:
      - "backend-go/**"
      - "backend-python/**"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

# OIDCË™çË®º„Å´ÂøÖË¶Å„Å™Ê®©Èôê„ÇíÊòéÁ§∫ÁöÑ„Å´ÊåáÂÆö
permissions:
  id-token: write
  contents: read

jobs:
  # Â§âÊõ¥Ê§úÂá∫
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-go: ${{ steps.filter.outputs.backend-go }}
      backend-python: ${{ steps.filter.outputs.backend-python }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend-go:
              - 'backend-go/**'
            backend-python:
              - 'backend-python/**'

  # Backend Go „Éá„Éó„É≠„Ç§
  deploy-backend-go:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-go == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: neuraknot-prod-backend-go
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -f backend-go/docker/Dockerfile.prod \
            backend-go/
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition neuraKnot-prod-backend-go \
            --query taskDefinition \
            --region ${{ secrets.AWS_REGION }} > task-definition.json

      - name: Update task definition with new image
        id: task-def
        run: |
          echo "Image to deploy: ${{ steps.build-image.outputs.image }}"

          # Êó¢Â≠ò„ÅÆ„Çø„Çπ„ÇØÂÆöÁæ©„Åã„ÇâÊñ∞„Åó„ÅÑ„Çø„Çπ„ÇØÂÆöÁæ©„Çí‰ΩúÊàêÔºà„Ç§„É°„Éº„Ç∏URL„Å®„Çø„Çπ„ÇØ„É≠„Éº„É´„ÇíÊõ¥Êñ∞Ôºâ
          jq --arg IMAGE "${{ steps.build-image.outputs.image }}" \
            --arg TASK_ROLE "arn:aws:iam::528757808906:role/neuraKnot-prod-ecs-task-role" \
            --arg EXEC_ROLE "arn:aws:iam::528757808906:role/neuraKnot-prod-ecs-task-execution-role" \
            '.containerDefinitions[0].image = $IMAGE | 
             .taskRoleArn = $TASK_ROLE | 
             .executionRoleArn = $EXEC_ROLE | 
             del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
            task-definition.json > new-task-definition.json

          echo "New task definition created. Validating JSON..."

          # JSON„ÅåÊúâÂäπ„ÅãÁ¢∫Ë™ç
          if ! jq empty new-task-definition.json 2>/dev/null; then
            echo "Error: Generated task definition is not valid JSON"
            cat new-task-definition.json
            exit 1
          fi

          echo "Registering new task definition..."

          # Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØÂÆöÁæ©„ÇíÁôªÈå≤
          TASK_DEF_OUTPUT=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-definition.json \
            --region ${{ secrets.AWS_REGION }})

          NEW_TASK_ARN=$(echo "$TASK_DEF_OUTPUT" | jq -r '.taskDefinition.taskDefinitionArn')

          if [ -z "$NEW_TASK_ARN" ] || [ "$NEW_TASK_ARN" = "null" ]; then
            echo "Error: Failed to get task definition ARN"
            echo "$TASK_DEF_OUTPUT"
            exit 1
          fi

          echo "task_definition_arn=$NEW_TASK_ARN" >> $GITHUB_OUTPUT
          echo "New task definition registered: $NEW_TASK_ARN"

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME_GO }} \
            --task-definition ${{ steps.task-def.outputs.task_definition_arn }} \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --services ${{ secrets.ECS_SERVICE_NAME_GO }} \
            --region ${{ secrets.AWS_REGION }}

      - name: Deployment Success Notification
        if: success()
        run: |
          echo "‚úÖ Backend Go deployed successfully!"
          echo "Image: ${{ steps.build-image.outputs.image }}"

  # Backend Python „Éá„Éó„É≠„Ç§
  deploy-backend-python:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-python == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: neuraknot-prod-backend-python
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -f backend-python/docker/Dockerfile.prod \
            backend-python/
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition neuraKnot-prod-backend-python \
            --query taskDefinition \
            --region ${{ secrets.AWS_REGION }} > task-definition.json

      - name: Update task definition with new image
        id: task-def
        run: |
          echo "Image to deploy: ${{ steps.build-image.outputs.image }}"

          # Êó¢Â≠ò„ÅÆ„Çø„Çπ„ÇØÂÆöÁæ©„Åã„ÇâÊñ∞„Åó„ÅÑ„Çø„Çπ„ÇØÂÆöÁæ©„Çí‰ΩúÊàêÔºà„Ç§„É°„Éº„Ç∏URL„Å®„Çø„Çπ„ÇØ„É≠„Éº„É´„ÇíÊõ¥Êñ∞Ôºâ
          jq --arg IMAGE "${{ steps.build-image.outputs.image }}" \
            --arg TASK_ROLE "arn:aws:iam::528757808906:role/neuraKnot-prod-ecs-task-role" \
            --arg EXEC_ROLE "arn:aws:iam::528757808906:role/neuraKnot-prod-ecs-task-execution-role" \
            '.containerDefinitions[0].image = $IMAGE | 
             .taskRoleArn = $TASK_ROLE | 
             .executionRoleArn = $EXEC_ROLE | 
             del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
            task-definition.json > new-task-definition.json

          echo "New task definition created. Validating JSON..."

          # JSON„ÅåÊúâÂäπ„ÅãÁ¢∫Ë™ç
          if ! jq empty new-task-definition.json 2>/dev/null; then
            echo "Error: Generated task definition is not valid JSON"
            cat new-task-definition.json
            exit 1
          fi

          echo "Registering new task definition..."

          # Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØÂÆöÁæ©„ÇíÁôªÈå≤
          TASK_DEF_OUTPUT=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-definition.json \
            --region ${{ secrets.AWS_REGION }})

          NEW_TASK_ARN=$(echo "$TASK_DEF_OUTPUT" | jq -r '.taskDefinition.taskDefinitionArn')

          if [ -z "$NEW_TASK_ARN" ] || [ "$NEW_TASK_ARN" = "null" ]; then
            echo "Error: Failed to get task definition ARN"
            echo "$TASK_DEF_OUTPUT"
            exit 1
          fi

          echo "task_definition_arn=$NEW_TASK_ARN" >> $GITHUB_OUTPUT
          echo "New task definition registered: $NEW_TASK_ARN"

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME_PYTHON }} \
            --task-definition ${{ steps.task-def.outputs.task_definition_arn }} \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --services ${{ secrets.ECS_SERVICE_NAME_PYTHON }} \
            --region ${{ secrets.AWS_REGION }}

      - name: Deployment Success Notification
        if: success()
        run: |
          echo "‚úÖ Backend Python deployed successfully!"
          echo "Image: ${{ steps.build-image.outputs.image }}"

  # „Éá„Éó„É≠„Ç§ÂÆå‰∫ÜÈÄöÁü•
  deployment-complete:
    needs: [deploy-backend-go, deploy-backend-python]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check deployment status
        run: |
          if [ "${{ needs.deploy-backend-go.result }}" = "success" ] || \
             [ "${{ needs.deploy-backend-python.result }}" = "success" ]; then
            echo "üöÄ Deployment completed successfully!"
          else
            echo "‚ö†Ô∏è No services were deployed or deployment failed"
            exit 1
          fi
